# Enhanced Socratic RAG System v7.0

*ŒüœÖŒ¥Œ≠ŒΩ ŒøŒØŒ¥Œ±, ŒøœçœÑŒµ Œ¥ŒπŒ¥Œ¨œÉŒ∫œâ œÑŒπ, Œ±ŒªŒªŒ¨ Œ¥ŒπŒ±œÄŒøœÅœé ŒºœåŒΩŒøŒΩ* - "I know nothing, nor do I teach anything, but I only inquire"

## Overview

The Enhanced Socratic RAG System v7.0 is a sophisticated multi-agent architecture that combines the Socratic method with Retrieval-Augmented Generation (RAG) to guide users through project development using AI-powered questioning and contextual knowledge retrieval.

The system employs a collaborative approach where specialized AI agents work together to:
- Guide users through structured project phases using Socratic questioning
- Maintain project context and extract insights from conversations
- Generate production-ready code based on gathered requirements
- Provide intelligent knowledge retrieval and pattern analysis

## Key Features

### ü§ñ Multi-Agent Architecture
- **Project Manager Agent**: Handles project lifecycle and collaboration
- **Socratic Counselor Agent**: Guides users with targeted questions based on project phase
- **Context Analyzer Agent**: Analyzes conversation patterns and retrieves relevant knowledge
- **Code Generator Agent**: Creates production-ready scripts and documentation
- **System Monitor Agent**: Tracks usage, performance, and system health

### üìö Vector Database Integration
- ChromaDB-powered knowledge base with semantic search
- Automatic embedding generation using Sentence Transformers
- Pre-loaded software development knowledge base
- Contextual knowledge retrieval for enhanced guidance

### üîÑ Structured Development Phases
1. **Discovery**: Understanding project goals and requirements
2. **Analysis**: Identifying technical challenges and constraints
3. **Design**: Architectural planning and system design
4. **Implementation**: Code generation and deployment planning

### üíæ Persistent Storage
- SQLite database for project metadata and user management
- Secure user authentication with hashed passcodes
- Project versioning and collaboration support
- Session management and recovery

### üìä Monitoring & Analytics
- Token usage tracking and cost estimation
- API health monitoring
- Usage statistics and warnings
- Performance metrics

## Installation

### Prerequisites
- Python 3.8+
- Claude API key from Anthropic
- 4GB+ RAM recommended for vector embeddings

### Dependencies
```bash
pip install chromadb anthropic sentence-transformers numpy colorama sqlite3
```

### Quick Start
1. **Clone or download** the `Socratic7.py` file
2. **Set your API key** (one of these methods):
   ```bash
   export API_KEY_CLAUDE="your_claude_api_key_here"
   ```
   Or enter it when prompted during startup

3. **Run the system**:
   ```bash
   python3 Socratic7.py
   ```

## Usage Guide

### First Time Setup
1. Run the application
2. Choose "Create new account"
3. Enter a username and passcode
4. The system will initialize the knowledge base automatically

### Creating a Project
1. From the main menu, select "Create new project"
2. Enter a descriptive project name
3. The system enters Discovery phase automatically

### Socratic Guidance Session
The system will guide you through structured phases:

**Discovery Phase Questions:**
- What specific problem does your project solve?
- Who is your target audience?
- What are the core features you envision?
- How will your solution differ from existing ones?

**Analysis Phase Questions:**
- What technical challenges do you anticipate?
- What are your performance requirements?
- How will you handle security and authentication?

**Design Phase Questions:**
- How will you structure your application architecture?
- What design patterns will you use?
- How will you organize your code modules?

**Implementation Phase Questions:**
- What will be your first milestone?
- How will you handle deployment?
- What monitoring will you implement?

### Code Generation
Once you've progressed through the phases:
1. Select "Generate code" from the main menu
2. The system creates a complete, documented script based on your requirements
3. Optionally generate comprehensive documentation

### Project Management
- **Load existing project**: Resume work on previous projects
- **Save progress**: Projects auto-save after each session
- **Collaboration**: Add collaborators to projects (username-based)

## Architecture Deep Dive

### Agent Communication Pattern
```
User Input ‚Üí AgentOrchestrator ‚Üí Specific Agent ‚Üí Claude API ‚Üí Vector DB
    ‚Üì                              ‚Üì                ‚Üì          ‚Üì
Response ‚Üê Context Analysis ‚Üê Knowledge Retrieval ‚Üê Embedding Search
```

### Data Flow
1. **User Response** ‚Üí Socratic Counselor Agent
2. **Insight Extraction** ‚Üí Claude API processes natural language
3. **Context Update** ‚Üí Project context updated with structured insights
4. **Knowledge Retrieval** ‚Üí Vector DB searches for relevant information
5. **Next Question** ‚Üí Generated based on phase, context, and knowledge

### Storage Architecture
- **SQLite Database**: User accounts, project metadata
- **ChromaDB**: Vector embeddings, knowledge base
- **Pickle Serialization**: Complex project objects
- **File System**: Organized data directory structure

## Configuration

### Environment Variables
```bash
export API_KEY_CLAUDE="your_api_key"          # Required: Claude API key
export SOCRATIC_DATA_DIR="/custom/path"       # Optional: Data directory
```

### System Configuration (in code)
```python
CONFIG = {
    'MAX_CONTEXT_LENGTH': 8000,               # Max tokens per context
    'EMBEDDING_MODEL': 'all-MiniLM-L6-v2',   # Sentence transformer model
    'CLAUDE_MODEL': 'claude-3-sonnet-20240229', # Claude model version
    'MAX_RETRIES': 3,                         # API retry attempts
    'SESSION_TIMEOUT': 3600,                  # Session timeout (seconds)
}
```

## API Integration

### Claude API Usage
- **Model**: Claude 3 Sonnet
- **Token Management**: Automatic tracking and cost estimation
- **Error Handling**: Robust retry logic with exponential backoff
- **Health Monitoring**: Connection testing and status reporting

### Token Usage Optimization
- Context length management
- Prompt optimization for different phases
- Usage warnings at 80% threshold
- Cost estimation based on current pricing

## Troubleshooting

### Common Issues

**"ChromaDB not found"**
```bash
pip install chromadb
```

**"API key not found"**
- Set the `API_KEY_CLAUDE` environment variable
- Or enter when prompted at startup

**"Database locked" errors**
- Ensure only one instance is running
- Check file permissions in data directory

**High token usage**
- Monitor usage in system status
- Consider shorter responses
- Review conversation history length

**Knowledge base issues**
- Delete `socratic_data/vector_db` directory to rebuild
- Restart application to reload knowledge

### Performance Optimization

**For Large Projects:**
- Regular project saves to prevent data loss
- Monitor token usage in system status
- Use shorter, more focused responses

**For Multiple Users:**
- Each user maintains separate project spaces
- Collaboration through project sharing
- Concurrent usage supported with separate sessions

## Advanced Features

### Custom Knowledge Base
Add domain-specific knowledge by modifying the `_load_knowledge_base()` method:

```python
custom_knowledge = {
    'id': 'your_domain_knowledge',
    'content': 'Your domain-specific content here...',
    'category': 'custom',
    'metadata': {'topic': 'your_topic', 'difficulty': 'advanced'}
}
```

### Project Collaboration
1. Share project ID with collaborators
2. Collaborators can load shared projects
3. Conversation history shared across collaborators
4. Access control based on owner/collaborator status

### Extensibility
The agent-based architecture allows easy extension:
- Add new agent types by inheriting from `Agent` class
- Implement custom processing logic
- Register with orchestrator for request routing

## Development Phases Explained

### Discovery Phase
**Objective**: Understand the problem space and user needs
- Problem definition and scope
- Target audience identification
- Core feature requirements
- Competitive landscape analysis
- Success criteria definition

### Analysis Phase
**Objective**: Identify technical requirements and constraints
- Technical challenge assessment
- Performance and scalability requirements
- Security and compliance needs
- Integration requirements
- Technology stack evaluation

### Design Phase
**Objective**: Plan architecture and implementation approach
- System architecture design
- Design pattern selection
- Code organization strategy
- Development workflow planning
- Error handling and edge cases

### Implementation Phase
**Objective**: Generate production-ready code and deployment plan
- Milestone definition and planning
- Code generation with best practices
- Documentation creation
- Testing strategy
- Deployment and monitoring setup

## Security Considerations

- **Password Security**: SHA-256 hashed passcodes
- **API Key Protection**: Environment variable storage
- **Data Isolation**: User-specific project spaces
- **Input Validation**: Sanitized user inputs
- **Session Management**: Timeout-based security

## Cost Management

### Token Usage Optimization
- **Estimated Costs**: Real-time cost tracking
- **Usage Warnings**: Alerts at 80% threshold
- **Efficient Prompts**: Optimized for each phase
- **Context Management**: Automatic length control

### Current Pricing (Approximate)
- Input tokens: $0.003 per 1K tokens
- Output tokens: $0.015 per 1K tokens
- Average session: $0.10-0.50 depending on depth

## Contributing

This system is designed for extensibility. Areas for contribution:
- Additional knowledge domains
- New agent types
- Enhanced UI/UX
- Performance optimizations
- Additional language support

## License

Please ensure you have appropriate licenses for:
- Claude API usage (Anthropic terms)
- ChromaDB (Apache 2.0)
- Sentence Transformers (Apache 2.0)

## Support

For issues related to:
- **API connectivity**: Check Anthropic service status
- **Performance**: Monitor token usage and system resources
- **Data corruption**: Backup and restore from `socratic_data/` directory
- **Feature requests**: Modify agent behavior in respective classes

---

*"The unexamined project is not worth building"* - Socratic RAG System

**Version**: 7.0
**Last Updated**: 2024
**Architecture**: Multi-Agent RAG System
**Language**: Python 3.8+

